# ============================================================================
# Docker Compose - Development Environment
# ============================================================================

version: '3.8'

services:
  # -----------------------------------------------------------------------------
  # Main Application Service
  # -----------------------------------------------------------------------------
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: autonomous-agent-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql://agent:agent123@postgres:5432/autonomous_agent
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_URL=http://ollama:11434
      - GMAIL_API_ENABLED=true
      - GITHUB_API_ENABLED=true
    env_file:
      - .env
    volumes:
      - .:/app
      - app_logs:/app/logs
      - app_data:/app/data
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # -----------------------------------------------------------------------------
  # PostgreSQL Database
  # -----------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: autonomous-agent-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=autonomous_agent
      - POSTGRES_USER=agent
      - POSTGRES_PASSWORD=agent123
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent -d autonomous_agent"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # -----------------------------------------------------------------------------
  # Redis Cache
  # -----------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: autonomous-agent-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # -----------------------------------------------------------------------------
  # Ollama Local AI Service
  # -----------------------------------------------------------------------------
  ollama:
    image: ollama/ollama:latest
    container_name: autonomous-agent-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - agent-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # -----------------------------------------------------------------------------
  # Monitoring Services
  # -----------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: autonomous-agent-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - agent-network

  grafana:
    image: grafana/grafana:latest
    container_name: autonomous-agent-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - agent-network
    depends_on:
      - prometheus

  # -----------------------------------------------------------------------------
  # Log Aggregation
  # -----------------------------------------------------------------------------
  elasticsearch:
    image: elasticsearch:8.10.0
    container_name: autonomous-agent-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - agent-network

  kibana:
    image: kibana:8.10.0
    container_name: autonomous-agent-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - agent-network
    depends_on:
      - elasticsearch

  # -----------------------------------------------------------------------------
  # Development Tools
  # -----------------------------------------------------------------------------
  mailhog:
    image: mailhog/mailhog:latest
    container_name: autonomous-agent-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - agent-network

  # -----------------------------------------------------------------------------
  # Security Scanning (Development)
  # -----------------------------------------------------------------------------
  security-scanner:
    build:
      context: .
      dockerfile: Dockerfile
      target: security-scan
    container_name: autonomous-agent-security
    volumes:
      - ./security-reports:/app/security-reports
    command: ["tail", "-f", "/dev/null"]
    networks:
      - agent-network
    profiles:
      - security

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16