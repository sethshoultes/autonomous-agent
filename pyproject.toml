[tool.poetry]
name = "autonomous-agent"
version = "0.1.0"
description = "A privacy-focused autonomous agent for email management, research, and development tasks using local AI processing"
authors = ["Seth Shoultes <seth@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/username/autonomous-agent"
repository = "https://github.com/username/autonomous-agent"
documentation = "https://autonomous-agent.readthedocs.io"
keywords = ["ai", "automation", "email", "github", "ollama", "agent", "privacy"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications :: Email",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business",
]

[tool.poetry.dependencies]
python = "^3.11"

# Core Framework
asyncio = "^3.4.3"
aiofiles = "^23.2.0"
aioredis = "^2.0.1"
anyio = "^3.7.1"
click = "^8.1.7"
pydantic = "^2.3.0"
pydantic-settings = "^2.0.3"
structlog = "^23.1.0"
tenacity = "^8.2.3"
typer = "^0.9.0"

# External Service Clients
google-api-python-client = "^2.97.0"
google-auth = "^2.22.0"
google-auth-oauthlib = "^1.0.0"
PyGithub = "^1.59.1"
ollama = "^0.1.7"

# Configuration and Environment
python-dotenv = "^1.0.0"
PyYAML = "^6.0.1"
toml = "^0.10.2"

# Data Processing
orjson = "^3.9.7"
pandas = {version = "^2.1.0", optional = true}
numpy = {version = "^1.24.4", optional = true}

# Database
asyncpg = {version = "^0.28.0", optional = true}
sqlalchemy = {version = "^2.0.20", optional = true}
alembic = {version = "^1.12.0", optional = true}

# Workflow Management
prefect = "^2.10.21"
redis = "^4.6.0"

# HTTP and Web
httpx = "^0.24.1"
requests = "^2.31.0"

# Email Processing
email-validator = "^2.0.0"
imapclient = {version = "^2.3.1", optional = true}

# Security
cryptography = "^41.0.4"
passlib = "^1.7.4"

# Utilities
rich = "^13.5.2"
pendulum = "^2.1.2"
shortuuid = "^1.0.11"

[tool.poetry.group.dev.dependencies]
# Testing Framework
pytest = "^7.4.0"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"
pytest-xdist = "^3.3.1"
pytest-html = "^3.2.0"
pytest-timeout = "^2.1.0"
pytest-env = "^0.8.2"
pytest-benchmark = "^4.0.0"

# Testing Utilities
coverage = "^7.3.0"
factory-boy = "^3.3.0"
faker = "^19.6.1"
hypothesis = "^6.82.6"
responses = "^0.23.3"
aioresponses = "^0.7.4"
freezegun = "^1.2.2"

# Code Quality
ruff = "^0.0.287"
mypy = "^1.5.1"
black = "^23.7.0"
isort = "^5.12.0"
pre-commit = "^3.3.3"

# Security
bandit = "^1.7.5"
safety = "^2.3.5"

# Performance
memory-profiler = "^0.61.0"
psutil = "^5.9.5"

# Documentation
sphinx = "^7.1.2"
sphinx-rtd-theme = "^1.3.0"
sphinx-autodoc-typehints = "^1.24.0"
myst-parser = "^2.0.0"

# Development Tools
ipython = "^8.14.0"
jupyter = {version = "^1.0.0", optional = true}

[tool.poetry.group.test.dependencies]
# Additional test dependencies that aren't needed for development
locust = {version = "^2.16.1", optional = true}
semgrep = {version = "^1.35.0", optional = true}

[tool.poetry.extras]
all = [
    "pandas", "numpy", "asyncpg", "sqlalchemy", "alembic", 
    "imapclient", "jupyter", "locust", "semgrep"
]
database = ["asyncpg", "sqlalchemy", "alembic"]
email = ["imapclient"]
scientific = ["pandas", "numpy", "scipy"]
dev = ["jupyter", "locust", "semgrep"]

[tool.poetry.scripts]
autonomous-agent = "src.main:main"
agent-cli = "src.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# Tool Configuration
# ============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=90",
    "--cov-branch",
    "--tb=short",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast)",
    "integration: Integration tests (slower)",
    "slow: Slow tests",
    "gmail: Tests requiring Gmail API",
    "github: Tests requiring GitHub API", 
    "ollama: Tests requiring Ollama",
    "external: Tests requiring external services",
    "smoke: Smoke tests for basic functionality",
    "regression: Regression tests",
    "security: Security tests",
    "performance: Performance tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:tensorflow.*",
    "ignore::UserWarning:transformers.*",
]
asyncio_mode = "auto"
timeout = 300
env = [
    "TESTING = true",
    "LOG_LEVEL = DEBUG",
    "ENVIRONMENT = test",
    "DISABLE_EXTERNAL_APIS = true",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/site-packages/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
]
show_missing = true
skip_covered = false
skip_empty = true
precision = 2
fail_under = 90

[tool.coverage.html]
directory = "htmlcov"
title = "Autonomous Agent Test Coverage"

[tool.coverage.xml]
output = "coverage.xml"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
pretty = true
color_output = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "google.*",
    "ollama.*",
    "github.*",
    "redis.*",
    "prefect.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 100
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "S311"]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["src", "tests"]
force-sort-within-sections = true

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["src", "tests"]
force_sort_within_sections = true
combine_as_imports = true

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]