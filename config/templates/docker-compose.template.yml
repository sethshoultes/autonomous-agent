# ============================================================================
# Docker Compose Template for Autonomous Agent
# ============================================================================
# This template provides a complete production-ready Docker Compose setup
# with proper configuration, security, and monitoring.
# ============================================================================

version: '3.8'

# ============================================================================
# Services Configuration
# ============================================================================
services:
  # ---------------------------------------------------------------------------
  # Main Application Service
  # ---------------------------------------------------------------------------
  app:
    image: autonomous-agent:${APP_VERSION:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${APP_VERSION:-latest}
    container_name: autonomous-agent-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OLLAMA_URL=${OLLAMA_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - GMAIL_CLIENT_ID=${GMAIL_CLIENT_ID}
      - GMAIL_CLIENT_SECRET=${GMAIL_CLIENT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
      - ./config/${ENVIRONMENT:-production}:/app/config:ro
      - ./secrets:/app/secrets:ro
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: '${APP_CPU_LIMIT:-2.0}'
          memory: ${APP_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${APP_CPU_RESERVATION:-1.0}'
          memory: ${APP_MEMORY_RESERVATION:-512M}
      replicas: ${APP_REPLICAS:-1}
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # ---------------------------------------------------------------------------
  # PostgreSQL Database
  # ---------------------------------------------------------------------------
  postgres:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    container_name: autonomous-agent-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-autonomous_agent}
      - POSTGRES_USER=${DATABASE_USER:-agent}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - backend
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    deploy:
      resources:
        limits:
          cpus: '${POSTGRES_CPU_LIMIT:-1.0}'
          memory: ${POSTGRES_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '${POSTGRES_CPU_RESERVATION:-0.5}'
          memory: ${POSTGRES_MEMORY_RESERVATION:-256M}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-agent} -d ${DATABASE_NAME:-autonomous_agent}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
      - /var/run/postgresql:size=100M,noexec,nosuid,nodev
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # ---------------------------------------------------------------------------
  # Redis Cache
  # ---------------------------------------------------------------------------
  redis:
    image: redis:${REDIS_VERSION:-7}-alpine
    container_name: autonomous-agent-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.${ENVIRONMENT:-production}.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - backend
    ports:
      - "${REDIS_PORT:-6379}:6379"
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-0.5}'
          memory: ${REDIS_MEMORY_LIMIT:-256M}
        reservations:
          cpus: '${REDIS_CPU_RESERVATION:-0.25}'
          memory: ${REDIS_MEMORY_RESERVATION:-128M}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # ---------------------------------------------------------------------------
  # Ollama AI Service
  # ---------------------------------------------------------------------------
  ollama:
    image: ollama/ollama:${OLLAMA_VERSION:-latest}
    container_name: autonomous-agent-ollama
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=http://localhost:8000
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-4}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS:-2}
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - backend
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    deploy:
      resources:
        limits:
          cpus: '${OLLAMA_CPU_LIMIT:-4.0}'
          memory: ${OLLAMA_MEMORY_LIMIT:-8G}
        reservations:
          cpus: '${OLLAMA_CPU_RESERVATION:-2.0}'
          memory: ${OLLAMA_MEMORY_RESERVATION:-4G}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    security_opt:
      - no-new-privileges:true

  # ---------------------------------------------------------------------------
  # Nginx Reverse Proxy
  # ---------------------------------------------------------------------------
  nginx:
    image: nginx:${NGINX_VERSION:-alpine}
    container_name: autonomous-agent-nginx
    restart: unless-stopped
    depends_on:
      - app
    volumes:
      - ./config/templates/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/ssl:ro
      - ./docker/nginx/html:/var/www/html:ro
      - ./docker/nginx/static:/var/www/static:ro
      - nginx_logs:/var/log/nginx
    networks:
      - frontend
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    deploy:
      resources:
        limits:
          cpus: '${NGINX_CPU_LIMIT:-1.0}'
          memory: ${NGINX_MEMORY_LIMIT:-256M}
        reservations:
          cpus: '${NGINX_CPU_RESERVATION:-0.5}'
          memory: ${NGINX_MEMORY_RESERVATION:-128M}
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # ---------------------------------------------------------------------------
  # Monitoring Services
  # ---------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: autonomous-agent-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}'
      - '--storage.tsdb.retention.size=${PROMETHEUS_RETENTION_SIZE:-10GB}'
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
      - backend
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    deploy:
      resources:
        limits:
          cpus: '${PROMETHEUS_CPU_LIMIT:-1.0}'
          memory: ${PROMETHEUS_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${PROMETHEUS_CPU_RESERVATION:-0.5}'
          memory: ${PROMETHEUS_MEMORY_RESERVATION:-512M}
    security_opt:
      - no-new-privileges:true
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-latest}
    container_name: autonomous-agent-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USERNAME}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - monitoring
      - frontend
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    deploy:
      resources:
        limits:
          cpus: '${GRAFANA_CPU_LIMIT:-0.5}'
          memory: ${GRAFANA_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '${GRAFANA_CPU_RESERVATION:-0.25}'
          memory: ${GRAFANA_MEMORY_RESERVATION:-256M}
    security_opt:
      - no-new-privileges:true
    profiles:
      - monitoring

  # ---------------------------------------------------------------------------
  # Log Aggregation
  # ---------------------------------------------------------------------------
  elasticsearch:
    image: elasticsearch:${ELASTICSEARCH_VERSION:-8.10.0}
    container_name: autonomous-agent-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - "ES_JAVA_OPTS=-Xms${ELASTICSEARCH_HEAP_SIZE:-1g} -Xmx${ELASTICSEARCH_HEAP_SIZE:-1g}"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - monitoring
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    deploy:
      resources:
        limits:
          cpus: '${ELASTICSEARCH_CPU_LIMIT:-2.0}'
          memory: ${ELASTICSEARCH_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${ELASTICSEARCH_CPU_RESERVATION:-1.0}'
          memory: ${ELASTICSEARCH_MEMORY_RESERVATION:-1G}
    security_opt:
      - no-new-privileges:true
    profiles:
      - logging

  kibana:
    image: kibana:${KIBANA_VERSION:-8.10.0}
    container_name: autonomous-agent-kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    volumes:
      - kibana_data:/usr/share/kibana/data
      - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - monitoring
      - frontend
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    deploy:
      resources:
        limits:
          cpus: '${KIBANA_CPU_LIMIT:-1.0}'
          memory: ${KIBANA_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${KIBANA_CPU_RESERVATION:-0.5}'
          memory: ${KIBANA_MEMORY_RESERVATION:-512M}
    security_opt:
      - no-new-privileges:true
    profiles:
      - logging

  # ---------------------------------------------------------------------------
  # Backup Service
  # ---------------------------------------------------------------------------
  backup:
    image: autonomous-agent-backup:${BACKUP_VERSION:-latest}
    build:
      context: ./docker/backup
      dockerfile: Dockerfile
    container_name: autonomous-agent-backup
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
    volumes:
      - backup_data:/backup
      - postgres_data:/source/postgres:ro
      - redis_data:/source/redis:ro
      - ./scripts/backup:/scripts:ro
    networks:
      - backend
    profiles:
      - backup

  # ---------------------------------------------------------------------------
  # Security Scanner
  # ---------------------------------------------------------------------------
  security-scanner:
    image: autonomous-agent-security:${SECURITY_VERSION:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: security-scan
    container_name: autonomous-agent-security
    restart: "no"
    volumes:
      - ./security-reports:/app/security-reports
      - ./scripts/security:/scripts:ro
    networks:
      - monitoring
    profiles:
      - security

# ============================================================================
# Volumes Configuration
# ============================================================================
volumes:
  # Application data
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/logs
  
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/app
  
  # Database data
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/postgres
  
  # Cache data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/redis
  
  # AI service data
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/ollama
  
  # Monitoring data
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/grafana
  
  # Logging data
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/elasticsearch
  
  kibana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/kibana
  
  # Nginx logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/nginx-logs
  
  # Backup data
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/autonomous-agent/data}/backup

# ============================================================================
# Networks Configuration
# ============================================================================
networks:
  # Frontend network (public-facing services)
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: ${FRONTEND_SUBNET:-172.21.0.0/16}
          gateway: ${FRONTEND_GATEWAY:-172.21.0.1}
  
  # Backend network (internal services)
  backend:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: ${BACKEND_SUBNET:-172.22.0.0/16}
          gateway: ${BACKEND_GATEWAY:-172.22.0.1}
  
  # Monitoring network (monitoring services)
  monitoring:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: ${MONITORING_SUBNET:-172.23.0.0/16}
          gateway: ${MONITORING_GATEWAY:-172.23.0.1}

# ============================================================================
# Secrets Configuration
# ============================================================================
secrets:
  postgres_password:
    file: ${SECRETS_PATH:-./secrets}/postgres_password.txt
  redis_password:
    file: ${SECRETS_PATH:-./secrets}/redis_password.txt
  jwt_secret:
    file: ${SECRETS_PATH:-./secrets}/jwt_secret.txt
  encryption_key:
    file: ${SECRETS_PATH:-./secrets}/encryption_key.txt
  gmail_credentials:
    file: ${SECRETS_PATH:-./secrets}/gmail_credentials.json
  google_oauth:
    file: ${SECRETS_PATH:-./secrets}/google_oauth.json
  github_token:
    file: ${SECRETS_PATH:-./secrets}/github_token.txt
  grafana_password:
    file: ${SECRETS_PATH:-./secrets}/grafana_password.txt
  elasticsearch_password:
    file: ${SECRETS_PATH:-./secrets}/elasticsearch_password.txt
  smtp_password:
    file: ${SECRETS_PATH:-./secrets}/smtp_password.txt
  s3_credentials:
    file: ${SECRETS_PATH:-./secrets}/s3_credentials.json

# ============================================================================
# Configuration Overrides
# ============================================================================
# This section allows for environment-specific configurations
# Use docker-compose.override.yml for local development overrides
# Use docker-compose.staging.yml for staging environment
# Use docker-compose.production.yml for production environment